name: KI update trigger

on:
  push:
    branches:
      - main
    paths:
      - 'source/intro_release_notes/release_notes/known_issues.rst'
      - 'source/intro_release_notes/release_notes_enterprise/*.rst'

jobs:
  notify_slack_on_file_update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for accurate diffing of all changes

      - name: Get changed files (for conditional notification)
        id: changed-files
        uses: tj-actions/changed-files@v4
        with:
          files: |
            source/intro_release_notes/release_notes/known_issues.rst
            source/intro_release_notes/release_notes_enterprise/*.rst

      - name: Prepare Slack message content
        id: slack_message_content
        run: |
          # Initialize variables
          MESSAGE_TEXT=""
          COLOR=""
          FILE_LIST=""

          # Define a unique delimiter for multiline output
          # Make sure this delimiter doesn't appear in your actual message content
          DELIMITER="EOF_SLACK_MESSAGE"

          # Determine the event type and details
          if [[ "${{ github.event_name }}" == "push" ]]; then
            REF_TYPE="branch"
            REF_NAME="${{ github.ref_name }}"
            COMMIT_SHA="${{ github.sha }}"
            ACTOR="${{ github.actor }}"
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            REPOSITORY="${{ github.repository }}"
            ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

            FILE_LIST=$(git diff --name-only HEAD~1 HEAD | grep -E '^source/intro_release_notes/release_notes/known_issues.rst|source/intro_release_notes/release_notes_enterprise/.*\.rst$' || true)

            if [[ -n "$FILE_LIST" ]]; then
              # Start the message content with the delimiter
              MESSAGE_TEXT="${DELIMITER}
              *File(s) updated in push to \`${REF_NAME}\`!* ðŸš€
              *Repository:* ${{ github.repository }}
              *Committer:* ${{ github.actor }}
              *Commit Message:* \`${COMMIT_MESSAGE}\`
              *Files Changed:*
              \`\`\`
              ${FILE_LIST}
              \`\`\`
              <${ACTION_URL}|View Action Run>
              ${DELIMITER}" # End the message content with the delimiter
              COLOR="good"
            fi
          # Add the pull_request logic here if you want it (as per previous example)
          # elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          #   ... (similar logic for PRs)
          fi

          # Set output variables using the delimiter
          echo "slack_message_text<<$DELIMITER" >> "$GITHUB_OUTPUT"
          echo "${MESSAGE_TEXT}" >> "$GITHUB_OUTPUT"
          echo "$DELIMITER" >> "$GITHUB_OUTPUT"
          echo "slack_color=${COLOR}" >> "$GITHUB_OUTPUT"

          - name: Send Slack Notification
        if: success() && steps.slack_message_content.outputs.slack_message_text != ''
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "${{ steps.slack_message_content.outputs.slack_message_text }}",
              "attachments": [
                {
                  "color": "${{ steps.slack_message_content.outputs.slack_color }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.KI_SLACK_WEBHOOK_URL }} # Reference the secret